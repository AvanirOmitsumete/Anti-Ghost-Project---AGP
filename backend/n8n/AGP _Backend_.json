{
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analyze the provided image and complete the task outlined below. Your output MUST be formatted for maximum readability and structured for easy data parsing:\nFormatting Rules:\n- Start your response with a $\\text{HEADING}$ summarizing the key result.\n- Use $\\text{BULLET POINTS}$ for all primary findings, details, or steps.\n- $\\text{BOLD}$ all key terms and final conclusions.\n- Conclude the response with a separate, single line providing your confidence score in the strict format: $\\text{CONFIDENCE: } [x/10]$ where $[x]$ is an integer from 1 to 10.\n\nIdentify the image if it is generated by AI or Not: \n{{ $('File Extension Switch').item.binary.File.fileName }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        240,
        0
      ],
      "id": "e91daeb3-8a79-49fd-94b2-1995ee878bcd",
      "name": "Image AI Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analyze the provided image and complete the task outlined below. Your output MUST be formatted for maximum readability and structured for easy data parsing:\nFormatting Rules:\n- Start your response with a $\\text{HEADING}$ summarizing the key result.\n- Use $\\text{BULLET POINTS}$ for all primary findings, details, or steps.\n- $\\text{BOLD}$ all key terms and final conclusions.\n- Conclude the response with a separate, single line providing your confidence score in the strict format: $\\text{CONFIDENCE: } [x/10]$ where $[x]$ is an integer from 1 to 10.\n\nIdentify the Text/Code if it is generated by AI or Not: \n{{ $('File Extension Switch').item.binary.File.fileName }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        240,
        272
      ],
      "id": "a8a6708d-79ae-4ce0-bd43-c12a079b88e7",
      "name": "Text/Code AI Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analyze the provided image and complete the task outlined below. Your output MUST be formatted for maximum readability and structured for easy data parsing:\nFormatting Rules:\n- Start your response with a $\\text{HEADING}$ summarizing the key result.\n- Use $\\text{BULLET POINTS}$ for all primary findings, details, or steps.\n- $\\text{BOLD}$ all key terms and final conclusions.\n- Conclude the response with a separate, single line providing your confidence score in the strict format: $\\text{CONFIDENCE: } [x/10]$ where $[x]$ is an integer from 1 to 10.\n\nIdentify the document if it is generated by AI or Not: \n{{ $('File Extension Switch').item.binary.File.fileName }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        240,
        544
      ],
      "id": "cf15d2f7-0aa4-40d7-bd7c-85e2e55f3a78",
      "name": "Document AI Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analyze the provided image and complete the task outlined below. Your output MUST be formatted for maximum readability and structured for easy data parsing:\nFormatting Rules:\n- Start your response with a $\\text{HEADING}$ summarizing the key result.\n- Use $\\text{BULLET POINTS}$ for all primary findings, details, or steps.\n- $\\text{BOLD}$ all key terms and final conclusions.\n- Conclude the response with a separate, single line providing your confidence score in the strict format: $\\text{CONFIDENCE: } [x/10]$ where $[x]$ is an integer from 1 to 10.\n\nIdentify the video if it is generated by AI or Not: \n{{ $('File Extension Switch').item.binary.File.fileName }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        240,
        832
      ],
      "id": "c8d85bca-e02e-41ba-8ff5-41f447c0e49b",
      "name": "Video AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        272,
        144
      ],
      "id": "e41d372e-4eb1-481e-b68b-075ee663e970",
      "name": "Image AI Checker",
      "credentials": {
        "googlePalmApi": {
          "id": "iZ6zLaWIpyPdJX4q",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        272,
        400
      ],
      "id": "d9985ce3-aab1-4dfd-94e0-b5e063efff45",
      "name": "Text/Code AI Checker",
      "credentials": {
        "googlePalmApi": {
          "id": "iZ6zLaWIpyPdJX4q",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        272,
        688
      ],
      "id": "eb423b73-dead-4319-bc45-f404d1fcec7e",
      "name": "Document AI Checker",
      "credentials": {
        "googlePalmApi": {
          "id": "iZ6zLaWIpyPdJX4q",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        272,
        1008
      ],
      "id": "5e6af80b-d1ca-4940-9840-3890e0473a0e",
      "name": "Video AI Checker",
      "credentials": {
        "googlePalmApi": {
          "id": "iZ6zLaWIpyPdJX4q",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://yklkwuotorsvdzyjxqvc.supabase.co/storage/v1/object/image_bucket/{{ $('File Extension Switch').item.binary.File.fileName }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "={{ $('File Extension Switch').item.binary.File.mimeType }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "File",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        0,
        0
      ],
      "id": "454146b8-3187-4638-a44a-fb84d3381cdf",
      "name": "Image HTTP Request",
      "credentials": {
        "supabaseApi": {
          "id": "OSUUO62UQZDuEGto",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://yklkwuotorsvdzyjxqvc.supabase.co/storage/v1/object/text_bucket/{{ $('File Extension Switch').item.binary.File.fileName }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "={{ $('File Extension Switch').item.binary.File.mimeType }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "File",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        0,
        272
      ],
      "id": "5005b747-28cc-430d-8489-da4cdbfd8dd0",
      "name": "Text/Code HTTP Request",
      "credentials": {
        "supabaseApi": {
          "id": "OSUUO62UQZDuEGto",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://yklkwuotorsvdzyjxqvc.supabase.co/storage/v1/object/document_bucket/{{ $('File Extension Switch').item.binary.File.fileName }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "={{ $('File Extension Switch').item.binary.File.mimeType }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "File",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        0,
        544
      ],
      "id": "9baf54e5-7436-48b6-bfdf-9094bfc653d0",
      "name": "Document HTTP Request",
      "credentials": {
        "supabaseApi": {
          "id": "OSUUO62UQZDuEGto",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://yklkwuotorsvdzyjxqvc.supabase.co/storage/v1/object/video_bucket/{{ $('File Extension Switch').item.binary.File.fileName }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "={{ $('File Extension Switch').item.binary.File.mimeType }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "File",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        0,
        832
      ],
      "id": "aaa1258d-9d0a-47c1-854d-0b58e6356d3f",
      "name": "Video HTTP Request",
      "credentials": {
        "supabaseApi": {
          "id": "OSUUO62UQZDuEGto",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "ai_file_registry",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "file_name",
              "fieldValue": "={{ $('File Extension Switch').item.binary.File.fileName }}"
            },
            {
              "fieldId": "file_category",
              "fieldValue": "={{ $('File Extension Switch').item.json.File_fileCategory }}"
            },
            {
              "fieldId": "mime_type",
              "fieldValue": "={{ $('File Extension Switch').item.binary.File.mimeType }}"
            },
            {
              "fieldId": "size_bytes",
              "fieldValue": "={{ $('File Extension Switch').item.binary.File.fileSize }}"
            },
            {
              "fieldId": "storage_bucket",
              "fieldValue": "image_bucket"
            },
            {
              "fieldId": "storage_path",
              "fieldValue": "=https://yklkwuotorsvdzyjxqvc.supabase.co/storage/v1/object/{{ $('Image HTTP Request').item.json.Key }}"
            },
            {
              "fieldId": "ai_agent_status",
              "fieldValue": "Completed"
            },
            {
              "fieldId": "ai_agent_result",
              "fieldValue": "={{ $json.output }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        640,
        0
      ],
      "id": "e1d6303e-69f7-4339-8550-81859f5f79b2",
      "name": "Image Path Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "OSUUO62UQZDuEGto",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "ai_file_registry",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "file_name",
              "fieldValue": "={{ $('File Extension Switch').item.binary.File.fileName }}"
            },
            {
              "fieldId": "file_category",
              "fieldValue": "={{ $('File Extension Switch').item.json.File_fileCategory }}"
            },
            {
              "fieldId": "mime_type",
              "fieldValue": "={{ $('File Extension Switch').item.binary.File.mimeType }}"
            },
            {
              "fieldId": "size_bytes",
              "fieldValue": "={{ $('File Extension Switch').item.binary.File.fileSize }}"
            },
            {
              "fieldId": "storage_bucket",
              "fieldValue": "text_bucket"
            },
            {
              "fieldId": "storage_path",
              "fieldValue": "=https://yklkwuotorsvdzyjxqvc.supabase.co/storage/v1/object/{{ $('Text/Code HTTP Request').item.json.Key }}"
            },
            {
              "fieldId": "ai_agent_status",
              "fieldValue": "Completed"
            },
            {
              "fieldId": "ai_agent_result",
              "fieldValue": "={{ $json.output }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        640,
        272
      ],
      "id": "0320d886-8ec1-49a2-a92c-4a2456724c5e",
      "name": "Text/Code Path Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "OSUUO62UQZDuEGto",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "ai_file_registry",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "file_name",
              "fieldValue": "={{ $('File Extension Switch').item.binary.File.fileName }}"
            },
            {
              "fieldId": "file_category",
              "fieldValue": "={{ $('File Extension Switch').item.json.File_fileCategory }}"
            },
            {
              "fieldId": "mime_type",
              "fieldValue": "={{ $('File Extension Switch').item.binary.File.mimeType }}"
            },
            {
              "fieldId": "size_bytes",
              "fieldValue": "={{ $('File Extension Switch').item.binary.File.fileSize }}"
            },
            {
              "fieldId": "storage_bucket",
              "fieldValue": "document_bucket"
            },
            {
              "fieldId": "storage_path",
              "fieldValue": "=https://yklkwuotorsvdzyjxqvc.supabase.co/storage/v1/object/{{ $('Document HTTP Request').item.json.Key }}"
            },
            {
              "fieldId": "ai_agent_status",
              "fieldValue": "Completed"
            },
            {
              "fieldId": "ai_agent_result",
              "fieldValue": "={{ $json.output }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        640,
        544
      ],
      "id": "98325c4a-9e58-4d04-ad24-dbb9d6dff5f5",
      "name": "Document Path Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "OSUUO62UQZDuEGto",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $execution.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        368,
        1008
      ],
      "id": "58ad4ffc-02ba-41c1-ba67-0fd348218a12",
      "name": "Video Simple Memory"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $execution.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        368,
        688
      ],
      "id": "7e355a16-8475-45e3-b8ea-83b4fcd86224",
      "name": "Document Simple Memory"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $execution.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        368,
        144
      ],
      "id": "b7eb1dac-7929-4069-bc49-f21902c38619",
      "name": "Image Simple Memory"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $execution.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        368,
        400
      ],
      "id": "9d7dbf22-7ee1-48f7-91b8-d0e35f586958",
      "name": "Text/Code Simple Memory"
    },
    {
      "parameters": {
        "tableId": "ai_file_registry",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "file_name",
              "fieldValue": "={{ $('File Extension Switch').item.binary.File.fileName }}"
            },
            {
              "fieldId": "file_category",
              "fieldValue": "={{ $('File Extension Switch').item.json.File_fileCategory }}"
            },
            {
              "fieldId": "mime_type",
              "fieldValue": "={{ $('File Extension Switch').item.binary.File.mimeType }}"
            },
            {
              "fieldId": "size_bytes",
              "fieldValue": "={{ $('File Extension Switch').item.binary.File.fileSize }}"
            },
            {
              "fieldId": "storage_bucket",
              "fieldValue": "video_bucket"
            },
            {
              "fieldId": "storage_path",
              "fieldValue": "=https://yklkwuotorsvdzyjxqvc.supabase.co/storage/v1/object/{{ $('Video HTTP Request').item.json.Key }}"
            },
            {
              "fieldId": "ai_agent_status",
              "fieldValue": "Completed"
            },
            {
              "fieldId": "ai_agent_result",
              "fieldValue": "={{ $json.output }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        640,
        832
      ],
      "id": "0920f934-8169-4e18-9cee-2825a9aa4a4f",
      "name": "Video Path Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "OSUUO62UQZDuEGto",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "web-3-transaction",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -800,
        1072
      ],
      "id": "61dd093b-20de-4233-99e1-8262a485f6c1",
      "name": "Webhook1",
      "webhookId": "3de25367-3d51-4bc4-903e-34ea7b3707c3"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://sepolia.infura.io/v3/{{ $credentials.infuraApi.projectId }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"eth_sendRawTransaction\",\n  \"params\": [\n    \"{{ $json.body.signedTx }}\"\n  ]\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -512,
        1072
      ],
      "id": "3a29d957-ec38-417a-a9ee-a6ddfaed9a2e",
      "name": "Transaction HTTP Request",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "content": "## File Extension Filter",
        "height": 272,
        "width": 416
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -624,
        352
      ],
      "typeVersion": 1,
      "id": "7fe791b1-b0a9-4a32-9474-fa6928b5ff3a",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "jsCode": "// --- 1. Define Extension Lists ---\nconst VIDEO_EXTENSIONS = ['mp4', 'webm', 'mov', 'avi', 'mkv', 'flv', 'wmv', '3gp'];\nconst TEXT_EXTENSIONS = ['txt', 'csv', 'json', 'log', 'md', 'xml', 'js', 'html', 'css'];\nconst IMAGE_EXTENSIONS = ['jpg', 'jpeg', 'png', 'gif', 'svg', 'webp', 'bmp', 'tiff', 'ico', 'heif', 'avif'];\nconst DOCUMENT_EXTENSIONS = ['pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx'];\n\n// --- 2. Helper Function to Get Extension ---\nfunction getFileExtension(filename) {\n    const lastDotIndex = filename.lastIndexOf('.');\n    if (lastDotIndex === -1 || lastDotIndex === filename.length - 1) {\n        return '';\n    }\n    return filename.substring(lastDotIndex + 1).toLowerCase();\n}\n\n// --- 3. Main Function to Process the n8n Input Array ---\nconst categorizedItems = [];\n\n// n8n function nodes process items one by one in a loop\nfor (const item of $input.all()) {\n    // Check if the item has binary data (which a webhook file upload will)\n    if (item.binary) {\n        const itemJson = item.json;\n        const itemBinary = item.binary;\n\n        // Iterate through all binary files attached to this item (e.g., if multiple files were uploaded)\n        for (const binaryKey in itemBinary) {\n            const binaryObject = itemBinary[binaryKey];\n            \n            // Get the filename from the binary data object\n            const filename = binaryObject.fileName; \n            const extension = getFileExtension(filename);\n            let category = 'Unknown';\n\n            // *** IF-ELSE-IF-ELSE Logic to assign the category ***\n            if (IMAGE_EXTENSIONS.includes(extension)) {\n                category = 'Image';\n            } else if (VIDEO_EXTENSIONS.includes(extension)) {\n                category = 'Video';\n            } else if (TEXT_EXTENSIONS.includes(extension)) {\n                category = 'Text/Code';\n            } else if (DOCUMENT_EXTENSIONS.includes(extension)) {\n                category = 'Document';\n            } else if (extension === 'zip' || extension === 'rar' || extension === '7z') {\n                category = 'Archive';\n            } else if (extension === '') {\n                category = 'No Extension';\n            } else {\n                category = 'Other';\n            }\n\n            // Add the new category property to the item's JSON data\n            // We use the binaryKey (e.g., 'data') to know which file this category belongs to.\n            itemJson[`${binaryKey}_fileCategory`] = category;\n            \n            // Optional: Log to the console for debugging in n8n\n            console.log(`Processed file: ${filename}, Category: ${category}`);\n        }\n        \n        // Push the modified item (with the new category in its JSON) to the output\n        categorizedItems.push(item);\n\n    } else {\n        // Handle items without binary data (e.g., simple form data)\n        categorizedItems.push(item);\n    }\n}\n\nreturn categorizedItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -576,
        432
      ],
      "id": "5f1be42d-c1f0-4338-a73d-d93615892f84",
      "name": "getFileExtension",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.File_fileCategory }}",
                    "rightValue": "Image",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "fd27c41f-c6d3-45ec-9c1f-d7ebae83abf3"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "eeea5aac-0e13-4f9f-8590-c081a67db829",
                    "leftValue": "={{ $json.File_fileCategory }}",
                    "rightValue": "Text/Code",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3b0f65a5-c6a7-4f10-a716-2ae19c3ea381",
                    "leftValue": "={{ $json.File_fileCategory }}",
                    "rightValue": "Document",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "f57918c7-71ce-4829-b35c-06740f135c73",
                    "leftValue": "={{ $json.File_fileCategory }}",
                    "rightValue": "Video",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -368,
        400
      ],
      "id": "fec30d4d-d7cc-44ca-aaa0-fae6ca772834",
      "name": "File Extension Switch"
    },
    {
      "parameters": {
        "content": "## Post Files to the supabase bucket",
        "height": 1072
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -80,
        -96
      ],
      "typeVersion": 1,
      "id": "14b3cb9c-373d-4c36-815d-aec32b2e982d",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## AI File Validator ",
        "height": 1248,
        "width": 288
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        208,
        -96
      ],
      "typeVersion": 1,
      "id": "7aaab5ee-ad4d-4660-95ad-b2866bcda953",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## Post the data to supabase",
        "height": 1104,
        "width": 256
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        576,
        -96
      ],
      "typeVersion": 1,
      "id": "27aa70c7-1a4b-48ec-ae0a-42f7b6091b78",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "store",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -848,
        432
      ],
      "id": "d26c6c72-2d5d-4680-830e-e75a3a4e381e",
      "name": "AI File Validator Webhook",
      "webhookId": "7d14df81-ef1a-488a-9c25-9339b9ea5b07"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "ai_file_registry",
        "filters": {
          "conditions": [
            {
              "keyName": "file_name",
              "keyValue": "crocodile.png"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -752,
        1424
      ],
      "id": "72af7bac-0685-4321-a491-909512813ec6",
      "name": "Get a row",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "OSUUO62UQZDuEGto",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.storage_path }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -560,
        1424
      ],
      "id": "4bf0bb30-5efb-44d0-b236-268b1771bf26",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0a4f0ec0-7881-407a-b0bc-3128221fb87a",
              "name": "PRIVATE_KEY",
              "value": "SEPLOIA_INFURA_PRIVATE_KEY",
              "type": "string"
            },
            {
              "id": "2fdcc4f3-fd7d-425f-ba20-7608d3913a25",
              "name": "INFURA_PROJECT_ID",
              "value": "SEPOLIA_INFURA_INFURA_PROJECT_ID",
              "type": "string"
            },
            {
              "id": "d8a6b006-5e60-4cb8-9000-f805f839291f",
              "name": "file",
              "value": "={{ $('HTTP Request').item.binary.data }}",
              "type": "binary"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -384,
        1424
      ],
      "id": "724b7d77-5a89-43ca-aa23-6e136156e6ea",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "// Function to hash a file (adapted for Buffer/Data input)\nasync function hashFile(fileData) {\n    const crypto = require(\"crypto\");\n    const hash = crypto.createHash(\"sha256\");\n    hash.update(fileData);\n    return \"0x\" + hash.digest(\"hex\");\n}\n\n/**\n * Main function for the n8n Code node.\n */\nasync function generateProofTx() {\n    // --- 1. Get Inputs from Previous Nodes ---\n    const inputItem = $input.first();\n    const jsonInput = inputItem.json;\n\n    // You are correctly passing the binary file under the key 'file' in the 'Edit Fields' node.\n    // We access it directly, as set by the preceding 'Edit Fields' node.\n    const binaryData = inputItem.binary.file; \n    const fileName = inputItem.binary.file.fileName;\n\n    if (!binaryData) {\n        throw new Error(\"File data is empty. Check the 'Edit Fields' node configuration for 'file' assignment.\");\n    }\n\n    // --- 2. Get Credentials/Config from n8n Environment ---\n    const { ethers } = require(\"ethers\"); \n    \n    // Credentials are correctly pulled from the JSON output of the 'Edit Fields' node.\n    const privateKey = jsonInput.PRIVATE_KEY;\n    // We assume INFURA_PROJECT_ID is now the simple ID string (e.g., \"640f...\")\n    const infuraProjectId = jsonInput.INFURA_PROJECT_ID; \n\n    // --- 3. Transaction Logic ---\n    try {\n        // This is the line that throws the 'invalid private key' error.\n        const provider = new ethers.InfuraProvider(\"sepolia\", infuraProjectId);\n        const signer = new ethers.Wallet(privateKey, provider); \n\n        const network = await provider.getNetwork();\n        const chainId = network.chainId;\n\n        // Hash the file content\n        const imageHash = await hashFile(binaryData); \n        // ... (rest of the logic remains the same and is fine) ...\n        const signature = await signer.signMessage(ethers.getBytes(imageHash)); \n        const nonce = await provider.getTransactionCount(signer.address);\n        const transactionData = imageHash + signature.substring(2);\n\n        const transaction = {\n            to: signer.address,\n            value: ethers.parseEther(\"0\"),\n            nonce,\n            type: 2,\n            chainId,\n            gasLimit: 60000,\n            maxPriorityFeePerGas: ethers.parseUnits(\"1\", \"gwei\"),\n            maxFeePerGas: ethers.parseUnits(\"50\", \"gwei\"),\n            data: transactionData,\n        };\n\n        const signedTx = await signer.signTransaction(transaction);\n\n        // --- 4. Prepare Output for Next Node (HTTP Request) ---\n        const payload = {\n            filePath: fileName || \"proof_file\", \n            fileHash: imageHash,\n            signature,\n            signedTx\n        };\n\n        // --- 5. Return Output ---\n        return [{ json: payload }];\n        \n    } catch (error) {\n        throw new Error(`Error in transaction generation: ${error.message}`);\n    }\n}\n\nreturn generateProofTx();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -192,
        1424
      ],
      "id": "ef25dd26-c75c-4e96-8584-f620ee17691b",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "content": "## Create Web 3-sepolia testnet-transaction",
        "height": 304,
        "width": 512
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -832,
        944
      ],
      "typeVersion": 1,
      "id": "eaed7d54-6f11-4fe4-ad70-fef2bd0d593d",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## To Be Continued...\n\n-- add the Transaction HTTP Request",
        "height": 256,
        "width": 848
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -832,
        1328
      ],
      "typeVersion": 1,
      "id": "d5eb8059-88ad-4688-8593-985cf786da08",
      "name": "Sticky Note5"
    }
  ],
  "connections": {
    "Image AI Agent": {
      "main": [
        [
          {
            "node": "Image Path Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text/Code AI Agent": {
      "main": [
        [
          {
            "node": "Text/Code Path Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Document AI Agent": {
      "main": [
        [
          {
            "node": "Document Path Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video AI Agent": {
      "main": [
        [
          {
            "node": "Video Path Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image AI Checker": {
      "ai_languageModel": [
        [
          {
            "node": "Image AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Text/Code AI Checker": {
      "ai_languageModel": [
        [
          {
            "node": "Text/Code AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Document AI Checker": {
      "ai_languageModel": [
        [
          {
            "node": "Document AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Video AI Checker": {
      "ai_languageModel": [
        [
          {
            "node": "Video AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Image HTTP Request": {
      "main": [
        [
          {
            "node": "Image AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text/Code HTTP Request": {
      "main": [
        [
          {
            "node": "Text/Code AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Document HTTP Request": {
      "main": [
        [
          {
            "node": "Document AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video HTTP Request": {
      "main": [
        [
          {
            "node": "Video AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Video AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Document Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Document AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Image Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Image AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Text/Code Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Text/Code AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "Transaction HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "getFileExtension": {
      "main": [
        [
          {
            "node": "File Extension Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Extension Switch": {
      "main": [
        [
          {
            "node": "Image HTTP Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Text/Code HTTP Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Document HTTP Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Video HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI File Validator Webhook": {
      "main": [
        [
          {
            "node": "getFileExtension",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a row": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "085efb5e08a1e8c707def963d5df03d5e42eb4fafb34ffb30fc282189ac4ea79"
  }
}