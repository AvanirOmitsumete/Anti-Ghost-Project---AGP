{
  "nodes": [
    {
      "parameters": {
        "jsCode": "// --- 1. Define Extension Lists ---\nconst VIDEO_EXTENSIONS = ['mp4', 'webm', 'mov', 'avi', 'mkv', 'flv', 'wmv', '3gp'];\nconst TEXT_EXTENSIONS = ['txt', 'csv', 'json', 'log', 'md', 'xml', 'js', 'html', 'css'];\nconst IMAGE_EXTENSIONS = ['jpg', 'jpeg', 'png', 'gif', 'svg', 'webp', 'bmp', 'tiff', 'ico', 'heif', 'avif'];\nconst DOCUMENT_EXTENSIONS = ['pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx'];\n\n// --- 2. Helper Function to Get Extension ---\nfunction getFileExtension(filename) {\n    const lastDotIndex = filename.lastIndexOf('.');\n    if (lastDotIndex === -1 || lastDotIndex === filename.length - 1) {\n        return '';\n    }\n    return filename.substring(lastDotIndex + 1).toLowerCase();\n}\n\n// --- 3. Main Function to Process the n8n Input Array ---\nconst categorizedItems = [];\n\n// n8n function nodes process items one by one in a loop\nfor (const item of $input.all()) {\n    // Check if the item has binary data (which a webhook file upload will)\n    if (item.binary) {\n        const itemJson = item.json;\n        const itemBinary = item.binary;\n\n        // Iterate through all binary files attached to this item (e.g., if multiple files were uploaded)\n        for (const binaryKey in itemBinary) {\n            const binaryObject = itemBinary[binaryKey];\n            \n            // Get the filename from the binary data object\n            const filename = binaryObject.fileName; \n            const extension = getFileExtension(filename);\n            let category = 'Unknown';\n\n            // *** IF-ELSE-IF-ELSE Logic to assign the category ***\n            if (IMAGE_EXTENSIONS.includes(extension)) {\n                category = 'Image';\n            } else if (VIDEO_EXTENSIONS.includes(extension)) {\n                category = 'Video';\n            } else if (TEXT_EXTENSIONS.includes(extension)) {\n                category = 'Text/Code';\n            } else if (DOCUMENT_EXTENSIONS.includes(extension)) {\n                category = 'Document';\n            } else if (extension === 'zip' || extension === 'rar' || extension === '7z') {\n                category = 'Archive';\n            } else if (extension === '') {\n                category = 'No Extension';\n            } else {\n                category = 'Other';\n            }\n\n            // Add the new category property to the item's JSON data\n            // We use the binaryKey (e.g., 'data') to know which file this category belongs to.\n            itemJson[`${binaryKey}_fileCategory`] = category;\n            \n            // Optional: Log to the console for debugging in n8n\n            console.log(`Processed file: ${filename}, Category: ${category}`);\n        }\n        \n        // Push the modified item (with the new category in its JSON) to the output\n        categorizedItems.push(item);\n\n    } else {\n        // Handle items without binary data (e.g., simple form data)\n        categorizedItems.push(item);\n    }\n}\n\nreturn categorizedItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1936,
        -464
      ],
      "id": "4e095931-d4ee-4825-be65-02341bfb66ab",
      "name": "Code",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.File_fileCategory }}",
                    "rightValue": "Image",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "fd27c41f-c6d3-45ec-9c1f-d7ebae83abf3"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "eeea5aac-0e13-4f9f-8590-c081a67db829",
                    "leftValue": "={{ $json.File_fileCategory }}",
                    "rightValue": "Text/Code",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3b0f65a5-c6a7-4f10-a716-2ae19c3ea381",
                    "leftValue": "={{ $json.File_fileCategory }}",
                    "rightValue": "Document",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "f57918c7-71ce-4829-b35c-06740f135c73",
                    "leftValue": "={{ $json.File_fileCategory }}",
                    "rightValue": "Video",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1728,
        -496
      ],
      "id": "1da44f43-d3d4-40e2-a4ea-eed1670e7b14",
      "name": "Switch"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analyze the provided image and complete the task outlined below. Your output MUST be formatted for maximum readability and structured for easy data parsing:\nFormatting Rules:\n- Start your response with a $\\text{HEADING}$ summarizing the key result.\n- Use $\\text{BULLET POINTS}$ for all primary findings, details, or steps.\n- $\\text{BOLD}$ all key terms and final conclusions.\n- Conclude the response with a separate, single line providing your confidence score in the strict format: $\\text{CONFIDENCE: } [x/10]$ where $[x]$ is an integer from 1 to 10.\n\nIdentify the image if it is generated by AI or Not: \n{{ $('Switch').item.binary.File.fileName }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -1120,
        -896
      ],
      "id": "f14a1712-9831-4d09-9089-3080adb15236",
      "name": "Image AI Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analyze the provided image and complete the task outlined below. Your output MUST be formatted for maximum readability and structured for easy data parsing:\nFormatting Rules:\n- Start your response with a $\\text{HEADING}$ summarizing the key result.\n- Use $\\text{BULLET POINTS}$ for all primary findings, details, or steps.\n- $\\text{BOLD}$ all key terms and final conclusions.\n- Conclude the response with a separate, single line providing your confidence score in the strict format: $\\text{CONFIDENCE: } [x/10]$ where $[x]$ is an integer from 1 to 10.\n\nIdentify the Text/Code if it is generated by AI or Not: \n{{ $('Switch').item.binary.File.fileName }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -1120,
        -624
      ],
      "id": "6b88becd-a6e7-4170-b678-dc9bdfe0a618",
      "name": "Text/Code AI Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analyze the provided image and complete the task outlined below. Your output MUST be formatted for maximum readability and structured for easy data parsing:\nFormatting Rules:\n- Start your response with a $\\text{HEADING}$ summarizing the key result.\n- Use $\\text{BULLET POINTS}$ for all primary findings, details, or steps.\n- $\\text{BOLD}$ all key terms and final conclusions.\n- Conclude the response with a separate, single line providing your confidence score in the strict format: $\\text{CONFIDENCE: } [x/10]$ where $[x]$ is an integer from 1 to 10.\n\nIdentify the document if it is generated by AI or Not: \n{{ $('Switch').item.binary.File.fileName }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -1120,
        -352
      ],
      "id": "3d8e4191-1c34-4f7c-ac44-9df77e50f312",
      "name": "Document AI Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analyze the provided image and complete the task outlined below. Your output MUST be formatted for maximum readability and structured for easy data parsing:\nFormatting Rules:\n- Start your response with a $\\text{HEADING}$ summarizing the key result.\n- Use $\\text{BULLET POINTS}$ for all primary findings, details, or steps.\n- $\\text{BOLD}$ all key terms and final conclusions.\n- Conclude the response with a separate, single line providing your confidence score in the strict format: $\\text{CONFIDENCE: } [x/10]$ where $[x]$ is an integer from 1 to 10.\n\nIdentify the video if it is generated by AI or Not: \n{{ $('Switch').item.binary.File.fileName }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -1120,
        -64
      ],
      "id": "f46dfd52-480c-4eb9-96a4-daa855c354e5",
      "name": "Video AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -1088,
        -752
      ],
      "id": "f6dca809-bfed-4f87-b668-9a9cba28b599",
      "name": "Image AI Checker",
      "credentials": {
        "googlePalmApi": {
          "id": "Mnzs7117tZJqYEjA",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -1088,
        -496
      ],
      "id": "ff71e366-d146-4477-9c8c-af247988981e",
      "name": "Text/Code AI Checker",
      "credentials": {
        "googlePalmApi": {
          "id": "Mnzs7117tZJqYEjA",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -1088,
        -208
      ],
      "id": "d7d72fb8-59cc-4460-aee8-9d3e3d376936",
      "name": "Document AI Checker",
      "credentials": {
        "googlePalmApi": {
          "id": "Mnzs7117tZJqYEjA",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -1088,
        112
      ],
      "id": "d64dc0db-c574-4cb1-9a30-577a8caa0206",
      "name": "Video AI Checker",
      "credentials": {
        "googlePalmApi": {
          "id": "Mnzs7117tZJqYEjA",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "store",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -2208,
        -464
      ],
      "id": "c5ba079a-1d80-4e7f-bab0-2e6be92c1346",
      "name": "Webhook",
      "webhookId": "7d14df81-ef1a-488a-9c25-9339b9ea5b07"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://{{ $credentials.supabaseApi.projectId }}.supabase.co/storage/v1/object/image_bucket/{{ $('Switch').item.binary.File.fileName }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "={{ $('Switch').item.binary.File.mimeType }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "File",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1360,
        -896
      ],
      "id": "da1ef4a2-a248-49ad-85d4-9f5b39c04e66",
      "name": "Image HTTP Request",
      "credentials": {
        "supabaseApi": {
          "id": "JhUmzBnqP9rHphFO",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://{{ $credentials.supabaseApi.projectId }}.supabase.co/storage/v1/object/text_bucket/{{ $('Switch').item.binary.File.fileName }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "={{ $('Switch').item.binary.File.mimeType }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "File",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1360,
        -624
      ],
      "id": "aa4e18ae-b883-4426-ab5d-1b3d92bedf48",
      "name": "Text/Code HTTP Request",
      "credentials": {
        "supabaseApi": {
          "id": "JhUmzBnqP9rHphFO",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://{{ $credentials.supabaseApi.projectId }}.supabase.co/storage/v1/object/document_bucket/{{ $('Switch').item.binary.File.fileName }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "={{ $('Switch').item.binary.File.mimeType }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "File",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1360,
        -352
      ],
      "id": "40c1dd19-b45b-47e0-84fb-d5c0940719e4",
      "name": "Document HTTP Request",
      "credentials": {
        "supabaseApi": {
          "id": "JhUmzBnqP9rHphFO",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://{{ $credentials.supabaseApi.projectId }}.supabase.co/storage/v1/object/video_bucket/{{ $('Switch').item.binary.File.fileName }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "={{ $('Switch').item.binary.File.mimeType }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "File",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1360,
        -64
      ],
      "id": "7b2063a7-2808-4013-b507-22632f56260e",
      "name": "Video HTTP Request",
      "credentials": {
        "supabaseApi": {
          "id": "JhUmzBnqP9rHphFO",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "ai_file_registry",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "file_name",
              "fieldValue": "={{ $('Switch').item.binary.File.fileName }}"
            },
            {
              "fieldId": "file_category",
              "fieldValue": "={{ $('Switch').item.json.File_fileCategory }}"
            },
            {
              "fieldId": "mime_type",
              "fieldValue": "={{ $('Switch').item.binary.File.mimeType }}"
            },
            {
              "fieldId": "size_bytes",
              "fieldValue": "={{ $('Switch').item.binary.File.fileSize }}"
            },
            {
              "fieldId": "storage_bucket",
              "fieldValue": "image_bucket"
            },
            {
              "fieldId": "storage_path",
              "fieldValue": "=https://{{ $credentials.supabaseApi.projectId }}.supabase.co/storage/v1/object/{{ $('Image HTTP Request').item.json.Key }}"
            },
            {
              "fieldId": "ai_agent_status",
              "fieldValue": "Completed"
            },
            {
              "fieldId": "ai_agent_result",
              "fieldValue": "={{ $json.output }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -720,
        -896
      ],
      "id": "4840f600-fa18-4ed9-bf7e-68111d3faa30",
      "name": "Image Path Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "JhUmzBnqP9rHphFO",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "ai_file_registry",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "file_name",
              "fieldValue": "={{ $('Switch').item.binary.File.fileName }}"
            },
            {
              "fieldId": "file_category",
              "fieldValue": "={{ $('Switch').item.json.File_fileCategory }}"
            },
            {
              "fieldId": "mime_type",
              "fieldValue": "={{ $('Switch').item.binary.File.mimeType }}"
            },
            {
              "fieldId": "size_bytes",
              "fieldValue": "={{ $('Switch').item.binary.File.fileSize }}"
            },
            {
              "fieldId": "storage_bucket",
              "fieldValue": "text_bucket"
            },
            {
              "fieldId": "storage_path",
              "fieldValue": "=https://{{ $credentials.supabaseApi.projectId }}.supabase.co/storage/v1/object/{{ $('Text/Code HTTP Request').item.json.Key }}"
            },
            {
              "fieldId": "ai_agent_status",
              "fieldValue": "Completed"
            },
            {
              "fieldId": "ai_agent_result",
              "fieldValue": "={{ $json.output }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -720,
        -624
      ],
      "id": "44d25004-ca11-4c62-8218-d4f1ff8b4b3a",
      "name": "Text/Code Path Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "JhUmzBnqP9rHphFO",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "ai_file_registry",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "file_name",
              "fieldValue": "={{ $('Switch').item.binary.File.fileName }}"
            },
            {
              "fieldId": "file_category",
              "fieldValue": "={{ $('Switch').item.json.File_fileCategory }}"
            },
            {
              "fieldId": "mime_type",
              "fieldValue": "={{ $('Switch').item.binary.File.mimeType }}"
            },
            {
              "fieldId": "size_bytes",
              "fieldValue": "={{ $('Switch').item.binary.File.fileSize }}"
            },
            {
              "fieldId": "storage_bucket",
              "fieldValue": "document_bucket"
            },
            {
              "fieldId": "storage_path",
              "fieldValue": "=https://{{ $credentials.supabaseApi.projectId }}.supabase.co/storage/v1/object/{{ $('Document HTTP Request').item.json.Key }}"
            },
            {
              "fieldId": "ai_agent_status",
              "fieldValue": "Completed"
            },
            {
              "fieldId": "ai_agent_result",
              "fieldValue": "={{ $json.output }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -720,
        -352
      ],
      "id": "50764a40-d0e1-440a-bc88-6ebb9bd67bb5",
      "name": "Document Path Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "JhUmzBnqP9rHphFO",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $execution.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -992,
        112
      ],
      "id": "67875552-d38c-4ac5-8c0b-aa5f53ba7e44",
      "name": "Video Simple Memory"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $execution.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -992,
        -208
      ],
      "id": "a971eab2-97e0-48f4-9c33-b7979d7dddcd",
      "name": "Document Simple Memory"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $execution.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -992,
        -752
      ],
      "id": "5edae7d7-b560-407b-9320-c500bd8f0eb2",
      "name": "Image Simple Memory"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $execution.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -992,
        -496
      ],
      "id": "6a555c14-a6d8-4dc6-a72f-116a8563a43b",
      "name": "Text/Code Simple Memory"
    },
    {
      "parameters": {
        "tableId": "ai_file_registry",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "file_name",
              "fieldValue": "={{ $('Switch').item.binary.File.fileName }}"
            },
            {
              "fieldId": "file_category",
              "fieldValue": "={{ $('Switch').item.json.File_fileCategory }}"
            },
            {
              "fieldId": "mime_type",
              "fieldValue": "={{ $('Switch').item.binary.File.mimeType }}"
            },
            {
              "fieldId": "size_bytes",
              "fieldValue": "={{ $('Switch').item.binary.File.fileSize }}"
            },
            {
              "fieldId": "storage_bucket",
              "fieldValue": "video_bucket"
            },
            {
              "fieldId": "storage_path",
              "fieldValue": "=https://{{ $credentials.supabaseApi.projectId }}.supabase.co/storage/v1/object/{{ $('Video HTTP Request').item.json.Key }}"
            },
            {
              "fieldId": "ai_agent_status",
              "fieldValue": "Completed"
            },
            {
              "fieldId": "ai_agent_result",
              "fieldValue": "={{ $json.output }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -720,
        -64
      ],
      "id": "f7794310-c770-4b7d-bcec-c60672d65c63",
      "name": "Video Path Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "JhUmzBnqP9rHphFO",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "web-3-transaction",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -2208,
        -176
      ],
      "id": "35de1622-5bd1-4ffb-9b93-91dc9bc337dc",
      "name": "Webhook1",
      "webhookId": "3de25367-3d51-4bc4-903e-34ea7b3707c3"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://sepolia.infura.io/v3/{{ $credentials.infuraApi.projectId }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"eth_sendRawTransaction\",\n  \"params\": [\n    \"{{ $json.body.signedTx }}\"\n  ]\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1920,
        -176
      ],
      "id": "65807d43-b11f-4919-8647-c1844fda7ec0",
      "name": "Transaction HTTP Request",
      "alwaysOutputData": true
    }
  ],
  "connections": {
    "Code": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Image HTTP Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Text/Code HTTP Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Document HTTP Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Video HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image AI Agent": {
      "main": [
        [
          {
            "node": "Image Path Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text/Code AI Agent": {
      "main": [
        [
          {
            "node": "Text/Code Path Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Document AI Agent": {
      "main": [
        [
          {
            "node": "Document Path Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video AI Agent": {
      "main": [
        [
          {
            "node": "Video Path Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image AI Checker": {
      "ai_languageModel": [
        [
          {
            "node": "Image AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Text/Code AI Checker": {
      "ai_languageModel": [
        [
          {
            "node": "Text/Code AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Document AI Checker": {
      "ai_languageModel": [
        [
          {
            "node": "Document AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Video AI Checker": {
      "ai_languageModel": [
        [
          {
            "node": "Video AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image HTTP Request": {
      "main": [
        [
          {
            "node": "Image AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text/Code HTTP Request": {
      "main": [
        [
          {
            "node": "Text/Code AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Document HTTP Request": {
      "main": [
        [
          {
            "node": "Document AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video HTTP Request": {
      "main": [
        [
          {
            "node": "Video AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image Path Supabase": {
      "main": [
        []
      ]
    },
    "Text/Code Path Supabase": {
      "main": [
        []
      ]
    },
    "Document Path Supabase": {
      "main": [
        []
      ]
    },
    "Video Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Video AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Document Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Document AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Image Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Image AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Text/Code Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Text/Code AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Video Path Supabase": {
      "main": [
        []
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "Transaction HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "8a6ee390da9f8f4143f5fc15909b2c94c676a9879cb4d52810fd8b8f20ff2e75"
  }
}