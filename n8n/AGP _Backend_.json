{
  "name": "AGP \"Backend\"",
  "nodes": [
    {
      "parameters": {
        "jsCode": "// --- 1. Define Extension Lists ---\nconst VIDEO_EXTENSIONS = ['mp4', 'webm', 'mov', 'avi', 'mkv', 'flv', 'wmv', '3gp'];\nconst TEXT_EXTENSIONS = ['txt', 'csv', 'json', 'log', 'md', 'xml', 'js', 'html', 'css'];\nconst IMAGE_EXTENSIONS = ['jpg', 'jpeg', 'png', 'gif', 'svg', 'webp', 'bmp', 'tiff', 'ico', 'heif', 'avif'];\nconst DOCUMENT_EXTENSIONS = ['pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx'];\n\n// --- 2. Helper Function to Get Extension ---\nfunction getFileExtension(filename) {\n    const lastDotIndex = filename.lastIndexOf('.');\n    if (lastDotIndex === -1 || lastDotIndex === filename.length - 1) {\n        return '';\n    }\n    return filename.substring(lastDotIndex + 1).toLowerCase();\n}\n\n// --- 3. Main Function to Process the n8n Input Array ---\nconst categorizedItems = [];\n\n// n8n function nodes process items one by one in a loop\nfor (const item of $input.all()) {\n    // Check if the item has binary data (which a webhook file upload will)\n    if (item.binary) {\n        const itemJson = item.json;\n        const itemBinary = item.binary;\n\n        // Iterate through all binary files attached to this item (e.g., if multiple files were uploaded)\n        for (const binaryKey in itemBinary) {\n            const binaryObject = itemBinary[binaryKey];\n            \n            // Get the filename from the binary data object\n            const filename = binaryObject.fileName; \n            const extension = getFileExtension(filename);\n            let category = 'Unknown';\n\n            // *** IF-ELSE-IF-ELSE Logic to assign the category ***\n            if (IMAGE_EXTENSIONS.includes(extension)) {\n                category = 'Image';\n            } else if (VIDEO_EXTENSIONS.includes(extension)) {\n                category = 'Video';\n            } else if (TEXT_EXTENSIONS.includes(extension)) {\n                category = 'Text/Code';\n            } else if (DOCUMENT_EXTENSIONS.includes(extension)) {\n                category = 'Document';\n            } else if (extension === 'zip' || extension === 'rar' || extension === '7z') {\n                category = 'Archive';\n            } else if (extension === '') {\n                category = 'No Extension';\n            } else {\n                category = 'Other';\n            }\n\n            // Add the new category property to the item's JSON data\n            // We use the binaryKey (e.g., 'data') to know which file this category belongs to.\n            itemJson[`${binaryKey}_fileCategory`] = category;\n            \n            // Optional: Log to the console for debugging in n8n\n            console.log(`Processed file: ${filename}, Category: ${category}`);\n        }\n        \n        // Push the modified item (with the new category in its JSON) to the output\n        categorizedItems.push(item);\n\n    } else {\n        // Handle items without binary data (e.g., simple form data)\n        categorizedItems.push(item);\n    }\n}\n\nreturn categorizedItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -320,
        304
      ],
      "id": "670a2f3e-b845-4b1b-ad3b-dbc9443b6f13",
      "name": "Code",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.File_fileCategory }}",
                    "rightValue": "Image",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "fd27c41f-c6d3-45ec-9c1f-d7ebae83abf3"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "eeea5aac-0e13-4f9f-8590-c081a67db829",
                    "leftValue": "={{ $json.File_fileCategory }}",
                    "rightValue": "Text/Code",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3b0f65a5-c6a7-4f10-a716-2ae19c3ea381",
                    "leftValue": "={{ $json.File_fileCategory }}",
                    "rightValue": "Document",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "f57918c7-71ce-4829-b35c-06740f135c73",
                    "leftValue": "={{ $json.File_fileCategory }}",
                    "rightValue": "Video",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -112,
        272
      ],
      "id": "b56bb906-b789-4656-9022-b51ca1a379a9",
      "name": "Switch"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analyze the provided image and complete the task outlined below. Your output MUST be formatted for maximum readability and structured for easy data parsing:\nFormatting Rules:\n- Start your response with a $\\text{HEADING}$ summarizing the key result.\n- Use $\\text{BULLET POINTS}$ for all primary findings, details, or steps.\n- $\\text{BOLD}$ all key terms and final conclusions.\n- Conclude the response with a separate, single line providing your confidence score in the strict format: $\\text{CONFIDENCE: } [x/10]$ where $[x]$ is an integer from 1 to 10.\n\nIdentify the image if it is generated by AI or Not: \n{{ $('Switch').item.binary.File.fileName }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        496,
        -128
      ],
      "id": "f97a7692-7091-455c-9cfb-4fb08cc824e4",
      "name": "Image AI Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analyze the provided image and complete the task outlined below. Your output MUST be formatted for maximum readability and structured for easy data parsing:\nFormatting Rules:\n- Start your response with a $\\text{HEADING}$ summarizing the key result.\n- Use $\\text{BULLET POINTS}$ for all primary findings, details, or steps.\n- $\\text{BOLD}$ all key terms and final conclusions.\n- Conclude the response with a separate, single line providing your confidence score in the strict format: $\\text{CONFIDENCE: } [x/10]$ where $[x]$ is an integer from 1 to 10.\n\nIdentify the Text/Code if it is generated by AI or Not: \n{{ $('Switch').item.binary.File.fileName }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        496,
        144
      ],
      "id": "bc3403dd-d52e-4760-8ea1-664814856de7",
      "name": "Text/Code AI Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analyze the provided image and complete the task outlined below. Your output MUST be formatted for maximum readability and structured for easy data parsing:\nFormatting Rules:\n- Start your response with a $\\text{HEADING}$ summarizing the key result.\n- Use $\\text{BULLET POINTS}$ for all primary findings, details, or steps.\n- $\\text{BOLD}$ all key terms and final conclusions.\n- Conclude the response with a separate, single line providing your confidence score in the strict format: $\\text{CONFIDENCE: } [x/10]$ where $[x]$ is an integer from 1 to 10.\n\nIdentify the document if it is generated by AI or Not: \n{{ $('Switch').item.binary.File.fileName }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        496,
        416
      ],
      "id": "45155e53-7cb1-4c5a-a1f1-f1f63f4c42b0",
      "name": "Document AI Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analyze the provided image and complete the task outlined below. Your output MUST be formatted for maximum readability and structured for easy data parsing:\nFormatting Rules:\n- Start your response with a $\\text{HEADING}$ summarizing the key result.\n- Use $\\text{BULLET POINTS}$ for all primary findings, details, or steps.\n- $\\text{BOLD}$ all key terms and final conclusions.\n- Conclude the response with a separate, single line providing your confidence score in the strict format: $\\text{CONFIDENCE: } [x/10]$ where $[x]$ is an integer from 1 to 10.\n\nIdentify the video if it is generated by AI or Not: \n{{ $('Switch').item.binary.File.fileName }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        496,
        704
      ],
      "id": "dfad12ab-e4f0-49f6-b929-fb90a692954a",
      "name": "Video AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        528,
        16
      ],
      "id": "eb34eb48-8ee9-4cbb-ad9a-8cabce60da1f",
      "name": "Image AI Checker",
      "credentials": {
        "googlePalmApi": {
          "id": "5GjNNFMLpPJrHU5T",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        528,
        272
      ],
      "id": "c32d6390-ed82-48e1-a185-f9d3c9373ae6",
      "name": "Text/Code AI Checker",
      "credentials": {
        "googlePalmApi": {
          "id": "5GjNNFMLpPJrHU5T",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        528,
        560
      ],
      "id": "62b78740-2325-49d0-a6d0-042db5072269",
      "name": "Document AI Checker",
      "credentials": {
        "googlePalmApi": {
          "id": "5GjNNFMLpPJrHU5T",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        528,
        864
      ],
      "id": "dce4da0c-e024-4932-8941-c8b1fcf617cc",
      "name": "Video AI Checker",
      "credentials": {
        "googlePalmApi": {
          "id": "5GjNNFMLpPJrHU5T",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "store",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -592,
        304
      ],
      "id": "0cf50eaa-1f32-4e53-ace9-19f81f3de2de",
      "name": "Webhook",
      "webhookId": "7d14df81-ef1a-488a-9c25-9339b9ea5b07"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://yklkwuotorsvdzyjxqvc.supabase.co/storage/v1/object/image_bucket/{{ $('Switch').item.binary.File.fileName }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "={{ $('Switch').item.binary.File.mimeType }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "File",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        256,
        -128
      ],
      "id": "8e4d8e54-97bb-4c65-bc30-8b181d016055",
      "name": "Image HTTP Request",
      "credentials": {
        "supabaseApi": {
          "id": "Giz3bRAqmB1qlSFE",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://yklkwuotorsvdzyjxqvc.supabase.co/storage/v1/object/text_bucket/{{ $('Switch').item.binary.File.fileName }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "={{ $('Switch').item.binary.File.mimeType }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "File",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        256,
        144
      ],
      "id": "5d9ec59f-a8b0-4fdd-b055-aee8eb748e7b",
      "name": "Text/Code HTTP Request",
      "credentials": {
        "supabaseApi": {
          "id": "Giz3bRAqmB1qlSFE",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://yklkwuotorsvdzyjxqvc.supabase.co/storage/v1/object/document_bucket/{{ $('Switch').item.binary.File.fileName }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "={{ $('Switch').item.binary.File.mimeType }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "File",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        256,
        416
      ],
      "id": "6d072846-a96b-4983-977a-fff8ec539d41",
      "name": "Document HTTP Request",
      "credentials": {
        "supabaseApi": {
          "id": "Giz3bRAqmB1qlSFE",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://yklkwuotorsvdzyjxqvc.supabase.co/storage/v1/object/video_bucket/{{ $('Switch').item.binary.File.fileName }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "={{ $('Switch').item.binary.File.mimeType }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "File",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        256,
        704
      ],
      "id": "d1a9ef5c-8d47-4d49-9472-95bbae9f893e",
      "name": "Video HTTP Request",
      "credentials": {
        "supabaseApi": {
          "id": "Giz3bRAqmB1qlSFE",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "ai_file_registry",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "file_name",
              "fieldValue": "={{ $('Switch').item.binary.File.fileName }}"
            },
            {
              "fieldId": "file_category",
              "fieldValue": "={{ $('Switch').item.json.File_fileCategory }}"
            },
            {
              "fieldId": "mime_type",
              "fieldValue": "={{ $('Switch').item.binary.File.mimeType }}"
            },
            {
              "fieldId": "size_bytes",
              "fieldValue": "={{ $('Switch').item.binary.File.fileSize }}"
            },
            {
              "fieldId": "storage_bucket",
              "fieldValue": "image_bucket"
            },
            {
              "fieldId": "storage_path",
              "fieldValue": "=https://yklkwuotorsvdzyjxqvc.supabase.co/storage/v1/object/{{ $('Image HTTP Request').item.json.Key }}"
            },
            {
              "fieldId": "ai_agent_status",
              "fieldValue": "Completed"
            },
            {
              "fieldId": "ai_agent_result",
              "fieldValue": "={{ $json.output }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        896,
        -128
      ],
      "id": "8ffba5dc-4b27-4a22-b799-18dad5331674",
      "name": "Image Path Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "Giz3bRAqmB1qlSFE",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "ai_file_registry",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "file_name",
              "fieldValue": "={{ $('Switch').item.binary.File.fileName }}"
            },
            {
              "fieldId": "file_category",
              "fieldValue": "={{ $('Switch').item.json.File_fileCategory }}"
            },
            {
              "fieldId": "mime_type",
              "fieldValue": "={{ $('Switch').item.binary.File.mimeType }}"
            },
            {
              "fieldId": "size_bytes",
              "fieldValue": "={{ $('Switch').item.binary.File.fileSize }}"
            },
            {
              "fieldId": "storage_bucket",
              "fieldValue": "text_bucket"
            },
            {
              "fieldId": "storage_path",
              "fieldValue": "=https://yklkwuotorsvdzyjxqvc.supabase.co/storage/v1/object/{{ $('Text/Code HTTP Request').item.json.Key }}"
            },
            {
              "fieldId": "ai_agent_status",
              "fieldValue": "Completed"
            },
            {
              "fieldId": "ai_agent_result",
              "fieldValue": "={{ $json.output }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        896,
        144
      ],
      "id": "f2ff6fbf-cd1c-45cd-ba7a-63b9808305db",
      "name": "Text/Code Path Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "Giz3bRAqmB1qlSFE",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "ai_file_registry",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "file_name",
              "fieldValue": "={{ $('Switch').item.binary.File.fileName }}"
            },
            {
              "fieldId": "file_category",
              "fieldValue": "={{ $('Switch').item.json.File_fileCategory }}"
            },
            {
              "fieldId": "mime_type",
              "fieldValue": "={{ $('Switch').item.binary.File.mimeType }}"
            },
            {
              "fieldId": "size_bytes",
              "fieldValue": "={{ $('Switch').item.binary.File.fileSize }}"
            },
            {
              "fieldId": "storage_bucket",
              "fieldValue": "document_bucket"
            },
            {
              "fieldId": "storage_path",
              "fieldValue": "=https://yklkwuotorsvdzyjxqvc.supabase.co/storage/v1/object/{{ $('Document HTTP Request').item.json.Key }}"
            },
            {
              "fieldId": "ai_agent_status",
              "fieldValue": "Completed"
            },
            {
              "fieldId": "ai_agent_result",
              "fieldValue": "={{ $json.output }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        896,
        416
      ],
      "id": "eb0a0a99-84b8-4355-9f8e-b5891f9701d3",
      "name": "Document Path Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "Giz3bRAqmB1qlSFE",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $execution.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        624,
        864
      ],
      "id": "0242cb68-79dc-490f-8538-3064bb33f339",
      "name": "Video Simple Memory"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $execution.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        624,
        560
      ],
      "id": "1118b551-0a97-4d99-8562-f1ead59428b7",
      "name": "Document Simple Memory"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $execution.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        624,
        16
      ],
      "id": "e6cb8c6a-dd04-4158-b190-28e989e06254",
      "name": "Image Simple Memory"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $execution.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        624,
        272
      ],
      "id": "e547f1a5-131b-48f5-853d-29360e0b54d1",
      "name": "Text/Code Simple Memory"
    },
    {
      "parameters": {
        "tableId": "ai_file_registry",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "file_name",
              "fieldValue": "={{ $('Switch').item.binary.File.fileName }}"
            },
            {
              "fieldId": "file_category",
              "fieldValue": "={{ $('Switch').item.json.File_fileCategory }}"
            },
            {
              "fieldId": "mime_type",
              "fieldValue": "={{ $('Switch').item.binary.File.mimeType }}"
            },
            {
              "fieldId": "size_bytes",
              "fieldValue": "={{ $('Switch').item.binary.File.fileSize }}"
            },
            {
              "fieldId": "storage_bucket",
              "fieldValue": "video_bucket"
            },
            {
              "fieldId": "storage_path",
              "fieldValue": "=https://yklkwuotorsvdzyjxqvc.supabase.co/storage/v1/object/{{ $('Video HTTP Request').item.json.Key }}"
            },
            {
              "fieldId": "ai_agent_status",
              "fieldValue": "Completed"
            },
            {
              "fieldId": "ai_agent_result",
              "fieldValue": "={{ $json.output }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        896,
        704
      ],
      "id": "08b67bb2-b2f5-4525-9f46-a734039885a5",
      "name": "Video Path Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "Giz3bRAqmB1qlSFE",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "recipient": "0x1de9c339013afa057b364687fc20816c90010bfa",
        "value": 0.0001,
        "additionalFields": {}
      },
      "type": "@majus/n8n-nodes-web3.ethereumTxBuilder",
      "typeVersion": 1,
      "position": [
        1136,
        -128
      ],
      "id": "0d7995a7-57c7-4113-9fc6-21fbb1c0c1d3",
      "name": "Build Transaction",
      "credentials": {
        "ethereumApi": {
          "id": "tHWuSNMhghqyO16K",
          "name": "Eliz Eth Acc"
        }
      }
    },
    {
      "parameters": {
        "recipient": "={{ $json.recipient }}",
        "value": "={{ $json.value }}",
        "nonce": "={{ $json.nonce }}",
        "calldata": "={{ $json.data }}",
        "signature": "={{ $json.signature }}"
      },
      "type": "@majus/n8n-nodes-web3.ethereumTxExecutor",
      "typeVersion": 1,
      "position": [
        1344,
        -128
      ],
      "id": "2e466913-4397-4e60-8710-df07c00f592d",
      "name": "Execute Transaction",
      "credentials": {
        "ethereumApi": {
          "id": "tHWuSNMhghqyO16K",
          "name": "Eliz Eth Acc"
        }
      }
    },
    {
      "parameters": {
        "recipient": "0x1de9c339013afa057b364687fc20816c90010bfa",
        "value": 0.0001,
        "additionalFields": {}
      },
      "type": "@majus/n8n-nodes-web3.ethereumTxBuilder",
      "typeVersion": 1,
      "position": [
        1136,
        144
      ],
      "id": "438f08df-2d4d-4a70-9896-7a64aeb3482b",
      "name": "Build Transaction1",
      "credentials": {
        "ethereumApi": {
          "id": "tHWuSNMhghqyO16K",
          "name": "Eliz Eth Acc"
        }
      }
    },
    {
      "parameters": {
        "recipient": "={{ $json.recipient }}",
        "value": "={{ $json.value }}",
        "nonce": "={{ $json.nonce }}",
        "calldata": "={{ $json.data }}",
        "signature": "={{ $json.signature }}"
      },
      "type": "@majus/n8n-nodes-web3.ethereumTxExecutor",
      "typeVersion": 1,
      "position": [
        1344,
        144
      ],
      "id": "baff6aed-bc69-4942-9ec8-f077977e7122",
      "name": "Execute Transaction1",
      "credentials": {
        "ethereumApi": {
          "id": "tHWuSNMhghqyO16K",
          "name": "Eliz Eth Acc"
        }
      }
    },
    {
      "parameters": {
        "recipient": "0x1de9c339013afa057b364687fc20816c90010bfa",
        "value": 0.0001,
        "additionalFields": {}
      },
      "type": "@majus/n8n-nodes-web3.ethereumTxBuilder",
      "typeVersion": 1,
      "position": [
        1136,
        416
      ],
      "id": "80a8a955-04a8-4cb9-a1a1-c99abd868824",
      "name": "Build Transaction2",
      "credentials": {
        "ethereumApi": {
          "id": "tHWuSNMhghqyO16K",
          "name": "Eliz Eth Acc"
        }
      }
    },
    {
      "parameters": {
        "recipient": "={{ $json.recipient }}",
        "value": "={{ $json.value }}",
        "nonce": "={{ $json.nonce }}",
        "calldata": "={{ $json.data }}",
        "signature": "={{ $json.signature }}"
      },
      "type": "@majus/n8n-nodes-web3.ethereumTxExecutor",
      "typeVersion": 1,
      "position": [
        1344,
        416
      ],
      "id": "93df53fb-0795-4435-95d4-ef62ca912a14",
      "name": "Execute Transaction2",
      "credentials": {
        "ethereumApi": {
          "id": "tHWuSNMhghqyO16K",
          "name": "Eliz Eth Acc"
        }
      }
    },
    {
      "parameters": {
        "recipient": "0x1de9c339013afa057b364687fc20816c90010bfa",
        "value": 0.0001,
        "additionalFields": {}
      },
      "type": "@majus/n8n-nodes-web3.ethereumTxBuilder",
      "typeVersion": 1,
      "position": [
        1136,
        704
      ],
      "id": "8f181fbe-95e7-4293-8dbd-d172278f4bce",
      "name": "Build Transaction3",
      "credentials": {
        "ethereumApi": {
          "id": "tHWuSNMhghqyO16K",
          "name": "Eliz Eth Acc"
        }
      }
    },
    {
      "parameters": {
        "recipient": "={{ $json.recipient }}",
        "value": "={{ $json.value }}",
        "nonce": "={{ $json.nonce }}",
        "calldata": "={{ $json.data }}",
        "signature": "={{ $json.signature }}"
      },
      "type": "@majus/n8n-nodes-web3.ethereumTxExecutor",
      "typeVersion": 1,
      "position": [
        1344,
        704
      ],
      "id": "3c277ba5-9880-40c6-a4f1-52b3c2a690b7",
      "name": "Execute Transaction3",
      "credentials": {
        "ethereumApi": {
          "id": "tHWuSNMhghqyO16K",
          "name": "Eliz Eth Acc"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Code": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Image HTTP Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Text/Code HTTP Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Document HTTP Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Video HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image AI Agent": {
      "main": [
        [
          {
            "node": "Image Path Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text/Code AI Agent": {
      "main": [
        [
          {
            "node": "Text/Code Path Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Document AI Agent": {
      "main": [
        [
          {
            "node": "Document Path Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video AI Agent": {
      "main": [
        [
          {
            "node": "Video Path Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image AI Checker": {
      "ai_languageModel": [
        [
          {
            "node": "Image AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Text/Code AI Checker": {
      "ai_languageModel": [
        [
          {
            "node": "Text/Code AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Document AI Checker": {
      "ai_languageModel": [
        [
          {
            "node": "Document AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Video AI Checker": {
      "ai_languageModel": [
        [
          {
            "node": "Video AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image HTTP Request": {
      "main": [
        [
          {
            "node": "Image AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text/Code HTTP Request": {
      "main": [
        [
          {
            "node": "Text/Code AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Document HTTP Request": {
      "main": [
        [
          {
            "node": "Document AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video HTTP Request": {
      "main": [
        [
          {
            "node": "Video AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Video AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Document Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Document AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Image Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Image AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Text/Code Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Text/Code AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Build Transaction": {
      "main": [
        [
          {
            "node": "Execute Transaction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image Path Supabase": {
      "main": [
        [
          {
            "node": "Build Transaction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Transaction1": {
      "main": [
        [
          {
            "node": "Execute Transaction1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Transaction2": {
      "main": [
        [
          {
            "node": "Execute Transaction2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Transaction3": {
      "main": [
        [
          {
            "node": "Execute Transaction3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video Path Supabase": {
      "main": [
        [
          {
            "node": "Build Transaction3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Document Path Supabase": {
      "main": [
        [
          {
            "node": "Build Transaction2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text/Code Path Supabase": {
      "main": [
        [
          {
            "node": "Build Transaction1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "cb6cab05-9dda-42ac-b843-6fffe1c2d252",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "37e57e7225314ce422fa0fad26b01dd22076673a01b2b7b98f1dac5c795a1470"
  },
  "id": "qFQxklBd7tEsh43g",
  "tags": []
}